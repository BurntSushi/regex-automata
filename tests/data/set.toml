# Basic multi-regex tests.

[[tests]]
name = "basic10"
regexes = ["a", "a"]
haystack = "a"
matches = [
  { id = 0, span = [0, 1] },
  { id = 1, span = [0, 1] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic10-leftmost-first"
regexes = ["a", "a"]
haystack = "a"
matches = [
  { id = 0, span = [0, 1] },
]
match_kind = "leftmost-first"
search_kind = "leftmost"

[[tests]]
name = "basic20"
regexes = ["a", "a"]
haystack = "ba"
matches = [
  { id = 0, span = [1, 2] },
  { id = 1, span = [1, 2] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic30"
regexes = ["a", "b"]
haystack = "a"
matches = [
  { id = 0, span = [0, 1] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic40"
regexes = ["a", "b"]
haystack = "b"
matches = [
  { id = 1, span = [0, 1] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic50"
regexes = ["a|b", "b|a"]
haystack = "b"
matches = [
  { id = 0, span = [0, 1] },
  { id = 1, span = [0, 1] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic60"
regexes = ["foo", "oo"]
haystack = "foo"
matches = [
  { id = 0, span = [0, 3] },
  { id = 1, span = [1, 3] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic60-leftmost-first"
regexes = ["foo", "oo"]
haystack = "foo"
matches = [
  { id = 0, span = [0, 3] },
]
match_kind = "leftmost-first"
search_kind = "leftmost"

[[tests]]
name = "basic61"
regexes = ["oo", "foo"]
haystack = "foo"
matches = [
  { id = 1, span = [0, 3] },
  { id = 0, span = [1, 3] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic61-leftmost-first"
regexes = ["oo", "foo"]
haystack = "foo"
matches = [
  { id = 1, span = [0, 3] },
]
match_kind = "leftmost-first"
search_kind = "leftmost"

[[tests]]
name = "basic70"
regexes = ["abcd", "bcd", "cd", "d"]
haystack = "abcd"
matches = [
  { id = 0, span = [0, 4] },
  { id = 1, span = [1, 4] },
  { id = 2, span = [2, 4] },
  { id = 3, span = [3, 4] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic71"
regexes = ["bcd", "cd", "d", "abcd"]
haystack = "abcd"
matches = [
  { id = 3, span = [0, 4] },
]
match_kind = "leftmost-first"
search_kind = "leftmost"

[[tests]]
name = "basic80"
regexes = ["^foo", "bar$"]
haystack = "foo"
matches = [
  { id = 0, span = [0, 3] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic81"
regexes = ["^foo", "bar$"]
haystack = "foo bar"
matches = [
  { id = 0, span = [0, 3] },
  { id = 1, span = [4, 7] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic82"
regexes = ["^foo", "bar$"]
haystack = "bar"
matches = [
  { id = 1, span = [0, 3] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic90"
regexes = ["[a-z]+$", "foo"]
haystack = "01234 foo"
matches = [
  { id = 0, span = [8, 9] },
  { id = 0, span = [7, 9] },
  { id = 0, span = [6, 9] },
  { id = 1, span = [6, 9] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic91"
regexes = ["[a-z]+$", "foo"]
haystack = "foo 01234"
matches = [
  { id = 1, span = [0, 3] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic100"
regexes = [".*?", "a"]
haystack = "zzza"
matches = [
  { id = 0, span = [0, 0] },
  { id = 0, span = [1, 1] },
  { id = 0, span = [0, 1] },
  { id = 0, span = [2, 2] },
  { id = 0, span = [1, 2] },
  { id = 0, span = [0, 2] },
  { id = 0, span = [3, 3] },
  { id = 0, span = [2, 3] },
  { id = 0, span = [1, 3] },
  { id = 0, span = [0, 3] },
  { id = 0, span = [4, 4] },
  { id = 0, span = [3, 4] },
  { id = 0, span = [2, 4] },
  { id = 0, span = [1, 4] },
  { id = 0, span = [0, 4] },
  { id = 1, span = [3, 4] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic101"
regexes = [".*", "a"]
haystack = "zzza"
matches = [
  { id = 0, span = [0, 0] },
  { id = 0, span = [1, 1] },
  { id = 0, span = [0, 1] },
  { id = 0, span = [2, 2] },
  { id = 0, span = [1, 2] },
  { id = 0, span = [0, 2] },
  { id = 0, span = [3, 3] },
  { id = 0, span = [2, 3] },
  { id = 0, span = [1, 3] },
  { id = 0, span = [0, 3] },
  { id = 0, span = [4, 4] },
  { id = 0, span = [3, 4] },
  { id = 0, span = [2, 4] },
  { id = 0, span = [1, 4] },
  { id = 0, span = [0, 4] },
  { id = 1, span = [3, 4] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic102"
regexes = [".*", "a"]
haystack = "zzz"
matches = [
  { id = 0, span = [0, 0] },
  { id = 0, span = [1, 1] },
  { id = 0, span = [0, 1] },
  { id = 0, span = [2, 2] },
  { id = 0, span = [1, 2] },
  { id = 0, span = [0, 2] },
  { id = 0, span = [3, 3] },
  { id = 0, span = [2, 3] },
  { id = 0, span = [1, 3] },
  { id = 0, span = [0, 3] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic110"
regexes = ['\ba\b']
haystack = "hello a bye"
matches = [
  { id = 0, span = [6, 7] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic111"
regexes = ['\ba\b', '\be\b']
haystack = "hello a bye e"
matches = [
  { id = 0, span = [6, 7] },
  { id = 1, span = [12, 13] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic120"
regexes = ["a"]
haystack = "a"
matches = [
  { id = 0, span = [0, 1] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic121"
regexes = [".*a"]
haystack = "a"
matches = [
  { id = 0, span = [0, 1] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic122"
regexes = [".*a", "β"]
haystack = "β"
matches = [
  { id = 1, span = [0, 2] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "basic130"
regexes = ["ab", "b"]
haystack = "ba"
matches = [
  { id = 1, span = [0, 1] },
]
match_kind = "all"
search_kind = "overlapping"

# These test cases where one of the regexes matches the empty string.

[[tests]]
name = "empty10"
regexes = ["", "a"]
haystack = "abc"
matches = [
  { id = 0, span = [0, 0] },
  { id = 1, span = [0, 1] },
  { id = 0, span = [1, 1] },
  { id = 0, span = [2, 2] },
  { id = 0, span = [3, 3] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "empty10-leftmost-first"
regexes = ["", "a"]
haystack = "abc"
matches = [
  { id = 0, span = [0, 0] },
  { id = 0, span = [1, 1] },
  { id = 0, span = [2, 2] },
  { id = 0, span = [3, 3] },
]
match_kind = "leftmost-first"
search_kind = "leftmost"

[[tests]]
name = "empty11"
regexes = ["a", ""]
haystack = "abc"
matches = [
  { id = 1, span = [0, 0] },
  { id = 0, span = [0, 1] },
  { id = 1, span = [1, 1] },
  { id = 1, span = [2, 2] },
  { id = 1, span = [3, 3] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "empty11-leftmost-first"
regexes = ["a", ""]
haystack = "abc"
matches = [
  { id = 0, span = [0, 1] },
  { id = 1, span = [2, 2] },
  { id = 1, span = [3, 3] },
]
match_kind = "leftmost-first"
search_kind = "leftmost"

[[tests]]
name = "empty20"
regexes = ["", "b"]
haystack = "abc"
matches = [
  { id = 0, span = [0, 0] },
  { id = 0, span = [1, 1] },
  { id = 1, span = [1, 2] },
  { id = 0, span = [2, 2] },
  { id = 0, span = [3, 3] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "empty20-leftmost-first"
regexes = ["", "b"]
haystack = "abc"
matches = [
  { id = 0, span = [0, 0] },
  { id = 0, span = [1, 1] },
  { id = 0, span = [2, 2] },
  { id = 0, span = [3, 3] },
]
match_kind = "leftmost-first"
search_kind = "leftmost"

[[tests]]
name = "empty21"
regexes = ["b", ""]
haystack = "abc"
matches = [
  { id = 1, span = [0, 0] },
  { id = 1, span = [1, 1] },
  { id = 0, span = [1, 2] },
  { id = 1, span = [2, 2] },
  { id = 1, span = [3, 3] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "empty21-leftmost-first"
regexes = ["b", ""]
haystack = "abc"
matches = [
  { id = 1, span = [0, 0] },
  { id = 0, span = [1, 2] },
  { id = 1, span = [3, 3] },
]
match_kind = "leftmost-first"
search_kind = "leftmost"

[[tests]]
name = "empty22"
regexes = ["(?:)", "b"]
haystack = "abc"
matches = [
  { id = 0, span = [0, 0] },
  { id = 0, span = [1, 1] },
  { id = 1, span = [1, 2] },
  { id = 0, span = [2, 2] },
  { id = 0, span = [3, 3] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "empty23"
regexes = ["b", "(?:)"]
haystack = "abc"
matches = [
  { id = 1, span = [0, 0] },
  { id = 1, span = [1, 1] },
  { id = 0, span = [1, 2] },
  { id = 1, span = [2, 2] },
  { id = 1, span = [3, 3] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "empty30"
regexes = ["", "z"]
haystack = "abc"
matches = [
  { id = 0, span = [0, 0] },
  { id = 0, span = [1, 1] },
  { id = 0, span = [2, 2] },
  { id = 0, span = [3, 3] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "empty30-leftmost-first"
regexes = ["", "z"]
haystack = "abc"
matches = [
  { id = 0, span = [0, 0] },
  { id = 0, span = [1, 1] },
  { id = 0, span = [2, 2] },
  { id = 0, span = [3, 3] },
]
match_kind = "leftmost-first"
search_kind = "leftmost"

[[tests]]
name = "empty31"
regexes = ["z", ""]
haystack = "abc"
matches = [
  { id = 1, span = [0, 0] },
  { id = 1, span = [1, 1] },
  { id = 1, span = [2, 2] },
  { id = 1, span = [3, 3] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "empty31-leftmost-first"
regexes = ["z", ""]
haystack = "abc"
matches = [
  { id = 1, span = [0, 0] },
  { id = 1, span = [1, 1] },
  { id = 1, span = [2, 2] },
  { id = 1, span = [3, 3] },
]
match_kind = "leftmost-first"
search_kind = "leftmost"

[[tests]]
name = "empty40"
regexes = ["c(?:)", "b"]
haystack = "abc"
matches = [
  { id = 1, span = [1, 2] },
  { id = 0, span = [2, 3] },
]
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "empty40-leftmost-first"
regexes = ["c(?:)", "b"]
haystack = "abc"
matches = [
  { id = 1, span = [1, 2] },
  { id = 0, span = [2, 3] },
]
match_kind = "leftmost-first"
search_kind = "leftmost"

# These test cases where there are no matches.

[[tests]]
name = "nomatch10"
regexes = ["a", "a"]
haystack = "b"
matches = []
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "nomatch20"
regexes = ["^foo", "bar$"]
haystack = "bar foo"
matches = []
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "nomatch30"
regexes = []
haystack = "a"
matches = []
match_kind = "all"
search_kind = "overlapping"

[[tests]]
name = "nomatch40"
regexes = ["^rooted$", '\.log$']
haystack = "notrooted"
matches = []
match_kind = "all"
search_kind = "overlapping"

# These test multi-regex searches with capture groups.
#
# NOTE: I wrote these tests in the course of developing a first class API for
# overlapping capturing group matches, but ultimately removed that API because
# the semantics for overlapping matches aren't totally clear. However, I've
# left the tests because I believe the semantics for these patterns are clear
# and because we can still test our "which patterns matched" APIs with them.

[[tests]]
name = "caps-010"
regexes = ['^(\w+) (\w+)$', '^(\S+) (\S+)$']
haystack = "Bruce Springsteen"
matches = [
  { id = 0, spans = [[0, 17], [0, 5], [6, 17]] },
  { id = 1, spans = [[0, 17], [0, 5], [6, 17]] },
]
match_kind = "all"
search_kind = "overlapping"
unicode = false
utf8 = false

[[tests]]
name = "caps-020"
regexes = ['^(\w+) (\w+)$', '^[A-Z](\S+) [A-Z](\S+)$']
haystack = "Bruce Springsteen"
matches = [
  { id = 0, spans = [[0, 17], [0, 5], [6, 17]] },
  { id = 1, spans = [[0, 17], [1, 5], [7, 17]] },
]
match_kind = "all"
search_kind = "overlapping"
unicode = false
utf8 = false

[[tests]]
name = "caps-030"
regexes = ['^(\w+) (\w+)$', '^([A-Z])(\S+) ([A-Z])(\S+)$']
haystack = "Bruce Springsteen"
matches = [
  { id = 0, spans = [[0, 17], [0, 5], [6, 17]] },
  { id = 1, spans = [[0, 17], [0, 1], [1, 5], [6, 7], [7, 17]] },
]
match_kind = "all"
search_kind = "overlapping"
unicode = false
utf8 = false

[[tests]]
name = "caps-110"
regexes = ['(\w+) (\w+)', '(\S+) (\S+)']
haystack = "Bruce Springsteen"
matches = [
  { id = 0, spans = [[0, 17], [0, 5], [6, 17]] },
]
match_kind = "leftmost-first"
search_kind = "leftmost"
unicode = false
utf8 = false

[[tests]]
name = "caps-120"
regexes = ['(\w+) (\w+)', '(\S+) (\S+)']
haystack = "&ruce $pringsteen"
matches = [
  { id = 1, spans = [[0, 17], [0, 5], [6, 17]] },
]
match_kind = "leftmost-first"
search_kind = "leftmost"
unicode = false
utf8 = false

[[tests]]
name = "caps-121"
regexes = ['(\w+) (\w+)', '(\S+) (\S+)']
haystack = "&ruce $pringsteen Foo Bar"
matches = [
  { id = 1, spans = [[0, 17], [0, 5], [6, 17]] },
  { id = 0, spans = [[18, 25], [18, 21], [22, 25]] },
]
match_kind = "leftmost-first"
search_kind = "leftmost"
unicode = false
utf8 = false
