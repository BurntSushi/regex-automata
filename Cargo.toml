[package]
name = "regex-automata"
version = "0.2.0"  #:version
authors = ["Andrew Gallant <jamslam@gmail.com>"]
description = "Automata construction and matching using regular expressions."
documentation = "https://docs.rs/regex-automata"
homepage = "https://github.com/BurntSushi/regex-automata"
repository = "https://github.com/BurntSushi/regex-automata"
readme = "README.md"
keywords = ["regex", "dfa", "automata", "automaton", "nfa"]
license = "Unlicense/MIT"
categories = ["text-processing"]
exclude = [
  "/.github", "/benchmarks",
]
edition = "2021"
resolver = "2"
autoexamples = false

[workspace]
members = ["regex-cli", "regex-test"]

[lib]
bench = false

[patch.crates-io]
regex = { path = "/home/andrew/rust/regex" }
regex-syntax = { path = "/home/andrew/rust/regex/regex-syntax" }

[features]
default = ["std", "syntax", "perf", "unicode", "meta", "nfa", "dfa", "hybrid"]
std = ["regex-syntax?/std", "memchr?/std", "aho-corasick?/std", "alloc"]
alloc = []

logging = ["dep:log", "aho-corasick?/logging"]
syntax = ["dep:regex-syntax", "alloc"]

meta = ["syntax", "nfa-pikevm"]

nfa = ["nfa-thompson", "nfa-pikevm", "nfa-backtrack"]
nfa-thompson = ["alloc"]
nfa-pikevm = ["nfa-thompson"]
nfa-backtrack = ["nfa-thompson"]

dfa = ["dfa-build", "dfa-search", "dfa-onepass"]
dfa-build = ["nfa-thompson", "dfa-search"]
dfa-search = []
dfa-onepass = ["nfa-thompson"]

hybrid = ["alloc", "nfa-thompson"]

perf = ["perf-inline", "perf-literal"]
perf-inline = []
perf-literal = ["perf-literal-substring", "perf-literal-multisubstring"]
perf-literal-substring = ["aho-corasick?/perf-literal", "dep:memchr"]
perf-literal-multisubstring = ["std", "dep:aho-corasick"]

# Enables all Unicode features. This expands if new Unicode features are added.
unicode = [
  "unicode-age",
  "unicode-bool",
  "unicode-case",
  "unicode-gencat",
  "unicode-perl",
  "unicode-script",
  "unicode-segment",
  "unicode-word-boundary",
  "regex-syntax?/unicode",
]
# Enables use of the `Age` property, e.g., `\p{Age:3.0}`.
unicode-age = ["regex-syntax?/unicode-age"]
# Enables use of a smattering of boolean properties, e.g., `\p{Emoji}`.
unicode-bool = ["regex-syntax?/unicode-bool"]
# Enables Unicode-aware case insensitive matching, e.g., `(?i)β`.
unicode-case = ["regex-syntax?/unicode-case"]
# Enables Unicode general categories, e.g., `\p{Letter}` or `\pL`.
unicode-gencat = ["regex-syntax?/unicode-gencat"]
# Enables Unicode-aware Perl classes corresponding to `\w`, `\s` and `\d`.
unicode-perl = ["regex-syntax?/unicode-perl"]
# Enables Unicode scripts and script extensions, e.g., `\p{Greek}`.
unicode-script = ["regex-syntax?/unicode-script"]
# Enables Unicode segmentation properties, e.g., `\p{gcb=Extend}`.
unicode-segment = ["regex-syntax?/unicode-segment"]
# Enables Unicode word boundary support. If this is enabled with unicode-perl,
# then data tables from regex-syntax are used. Otherwise, a new data table
# inside regex-automata will be included.
unicode-word-boundary = []

# These are strictly internal features that may be removed or changed in
# non-compatible ways.
internal-instrument = ["internal-instrument-pikevm"]
internal-instrument-pikevm = ["logging", "std"]

[dependencies]
aho-corasick = { version = "1.0.0", optional = true, default-features = false }
log = { version = "0.4.14", optional = true }
memchr = { version = "2.5.0", optional = true, default-features = false }
regex-syntax = { version = "0.6.24", optional = true, default-features = false }

[dev-dependencies]
anyhow = "1.0.69"
bstr = { version = "1.3.0", default-features = false, features = ["std"] }
quickcheck = { version = "1.0.3", default-features = false }
regex-test = { path = "regex-test" }

[dev-dependencies.env_logger]
version = "0.9.3"
default-features = false
features = ["atty", "humantime", "termcolor"]

[package.metadata.docs.rs]
# We want to document all features.
all-features = true
# Since this crate's feature setup is pretty complicated, it is worth opting
# into a nightly unstable option to show the features that need to be enabled
# for public API items. To do that, we set 'docsrs', and when that's enabled,
# we enable the 'doc_auto_cfg' feature.
#
# To test this locally, run:
#
#     RUSTDOCFLAGS="--cfg docsrs" cargo +nightly doc --all-features
rustdoc-args = ["--cfg", "docsrs"]

[[test]]
path = "tests/tests.rs"
name = "integration"

[profile.dev]
# Running tests takes too long in debug mode, so we forcefully always build
# with optimizations. Unfortunate, but, ¯\_(ツ)_/¯.
#
# It's counter-intuitive that this needs to be set on dev *and* test, but
# it's because the tests that take a long time to run are run as integration
# tests in a separate crate. The test.opt-level setting won't apply there, so
# we need to set the opt-level across the entire build.
opt-level = 3
debug = true

[profile.test]
opt-level = 3
debug = true

[profile.release]
debug = true

[profile.bench]
debug = true
