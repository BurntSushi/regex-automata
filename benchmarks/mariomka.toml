# Source: https://github.com/mariomka/regex-benchmark
#
# The benchmark metholodgy section for this benchmark is extremely sparse, but
# after looking at some example programs[1], it's clear that it slurps up the
# entire haystack and just finds all matches. That is, this is *not* a line
# oriented benchmark.
#
# The benchmark *also* includes the compile times of regexes. But... it uses
# a haystack that is so small that the compile times can actually have a
# small but measurable impact. However, the impact is typically below human
# perception, so it's not particularly relevant IMO.
#
# Anyway, in this benchmark suite, we separate compile time from search
# time. And here, we only measure search time, so it is not quite a precise
# reproduction of mariomka's benchmark.
#
# Another difference from mariomka's benchmark is that we actually try to
# control for equivalent functionality between regex engines, instead of
# comparing apples with oranges.
#
# [1]: https://github.com/mariomka/regex-benchmark/blob/17d073ec864931546e2694783f6231e4696a9ed4/rust/src/main.rs

# Haystack is: mariomka-input-text.txt

[[benches]]
type = "count"
name = "email"
regex = '[\w\.+-]+@[\w\.-]+\.[\w\.-]+'
haystack-path = "mariomka-input-text.txt"
case-insensitive = false
unicode = false
match-count = 92
engines = [
  'regex/api',
  'regexold/api',
  'regex/automata/meta',
  're2/api',
  # Wow, this reports a match count of 25 instead of the expected 92. Enabling
  # Unicode mode bumps it up to 92. This smells like a PCRE2 bug. Critical
  # example of why benchmarks need to check match counts. Do you think
  # mariomka's does? Noooooooooooooooooooooope.
  # 'pcre2/api/jit',
  'pcre2/api/nojit',
]
analysis = 'TODO'

[[benches]]
type = "count"
name = "uri"
regex = '[\w]+://[^/\s?#]+[^\s?#]+(?:\?[^\s#]*)?(?:#[^\s]*)?'
haystack-path = "mariomka-input-text.txt"
case-insensitive = false
unicode = false
match-count = 5_301
engines = [
  'regex/api',
  'regexold/api',
  'regex/automata/meta',
  're2/api',
  'pcre2/api/jit',
  'pcre2/api/nojit',
]
analysis = 'TODO'

[[benches]]
type = "count"
name = "ip"
regex = '(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])'
haystack-path = "mariomka-input-text.txt"
case-insensitive = false
unicode = false
match-count = 5
engines = [
  'regex/api',
  'regexold/api',
  'regex/automata/meta',
  're2/api',
  'pcre2/api/jit',
  'pcre2/api/nojit',
]
analysis = 'TODO'
