[[benches]]
type = "count"
name = "empty"
regex = ''
haystack-path = "rust-src-tools-3b0d4813.txt"
case-insensitive = false
unicode = false
match-count = 7384532
engines = [
  'regex/api',
  'regex/automata/dense',
  'regex/automata/sparse',
  'regex/automata/hybrid',
  'regex/automata/pikevm',
  'memchr/memmem',
  'regexold/api',
  're2/api',
  'pcre2/api/jit',
  'pcre2/api/nojit',
]
analysis = 'TODO'

[[benches]]
type = "count"
name = "match-every-line"
regex = '(?m)^.+$'
haystack-path = "rust-src-tools-3b0d4813.txt"
case-insensitive = false
unicode = true
match-count = 213766
engines = [
  'regex/api',
  'regex/automata/dense',
  'regex/automata/sparse',
  'regex/automata/hybrid',
  'regex/automata/pikevm',
  'regexold/api',
  're2/api',
  'pcre2/api/jit',
  # 'pcre2/api/nojit',
]
analysis = 'TODO'

[[benches]]
type = "count"
name = "fifty-word-chars-ascii"
regex = '\w{50}'
haystack-path = "rust-src-tools-3b0d4813.txt"
case-insensitive = false
unicode = false
match-count = 664
engines = [
  'regex/api',
  'regex/automata/dense',
  'regex/automata/sparse',
  'regex/automata/hybrid',
  'regex/automata/pikevm',
  'regexold/api',
  're2/api',
  'pcre2/api/jit',
  'pcre2/api/nojit',
]
analysis = 'TODO'

[[benches]]
type = "count"
name = "fifty-word-chars-unicode"
regex = '\w{50}'
haystack-path = "rust-src-tools-3b0d4813.txt"
case-insensitive = false
unicode = true
match-count = 666
engines = [
  'regex/api',
  'regex/automata/dense',
  'regex/automata/sparse',
  'regex/automata/hybrid',
  'regex/automata/pikevm',
  'regexold/api',
  'pcre2/api/jit',
  'pcre2/api/nojit',
]
analysis = 'TODO'

[[benches]]
type = "count"
name = "literal-never-match"
regex = 'ZQZQZQZQZQ'
haystack-path = "rust-src-tools-3b0d4813.txt"
case-insensitive = false
unicode = false
match-count = 0
engines = [
  'regex/api',
  'regex/automata/dense',
  'regex/automata/sparse',
  'regex/automata/hybrid',
  'regex/automata/pikevm',
  'memchr/memmem',
  'regexold/api',
  'pcre2/api/jit',
  'pcre2/api/nojit',
]
analysis = 'TODO'

[[benches]]
type = "count"
name = "boundary-words"
regex = '\b\w+\b'
haystack-path = "opensubtitles/ru-huge.txt"
case-insensitive = false
unicode = true
match-count = 56798
engines = [
  'regex/api',
  'regex/automata/pikevm',
  'regexold/api',
  'pcre2/api/jit',
  # 'pcre2/api/nojit',
]
analysis = 'TODO'

[[benches]]
type = "count"
name = "boundary-words-holmes"
regex = '\b\w+\s+Холмс\S+'
haystack-path = "opensubtitles/ru-huge.txt"
case-insensitive = false
unicode = true
match-count = 1
engines = [
  'regex/api',
  'regex/automata/pikevm',
  'regexold/api',
  'pcre2/api/jit',
  'pcre2/api/nojit',
]
analysis = 'TODO'

[[benches]]
type = "count"
name = "beginning-long-words"
regex = '(?m)^\w{10}'
haystack-path = "opensubtitles/ru-huge.txt"
case-insensitive = false
unicode = true
match-count = 351
engines = [
  'regex/api',
  'regex/automata/pikevm',
  'regexold/api',
  'pcre2/api/jit',
  'pcre2/api/nojit',
]
analysis = 'TODO'

[[benches]]
type = "count"
name = "letters"
regex = '\pL{100}'
haystack-path = "allcodepoints.txt"
case-insensitive = false
unicode = true
match-count = 1203
engines = [
  'regex/api',
  'regex/automata/dense',
  'regex/automata/hybrid',
  'regex/automata/pikevm',
  'regexold/api',
  # 're2/api',
  'pcre2/api/jit',
  'pcre2/api/nojit',
]
analysis = 'TODO'

[[benches]]
type = "count"
name = "letters-invalid-utf8"
regex = '\pL{100}\xFF'
haystack-path = "allcodepoints.txt"
case-insensitive = false
unicode = true
match-count = 0
engines = [
  'regex/api',
  'regex/automata/dense',
  'regex/automata/hybrid',
  'regex/automata/pikevm',
  'regexold/api',
]
analysis = 'TODO'

[[benches]]
type = "count-captures"
name = "bibleref-long"
# Sadly, not all regex engines support '(?x)', so we smush this monster into
# one line.
regex = '(?P<Book>(([1234]|I{1,4})[\t\f\pZ]*)?\pL+\.?)[\t\f\pZ]+(?P<Locations>((?P<Chapter>1?[0-9]?[0-9])(-(?P<ChapterEnd>\d+)|,\s*(?P<ChapterNext>\\d+))*(:\s*(?P<Verse>\d+))?(-(?P<VerseEnd>\d+)|,\s*(?P<VerseNext>\d+))*\s?)+)'
haystack-path = "opensubtitles/en-huge.txt"
case-insensitive = false
unicode = true
capture-count = 874
engines = [
  'regex/api',
  'regex/automata/pikevm',
  'regexold/api',
  're2/api',
  'pcre2/api/jit',
  'pcre2/api/nojit',
]
analysis = 'TODO'

[[benches]]
type = "count-captures"
name = "bibleref-short"
# Sadly, not all regex engines support '(?x)', so we smush this monster into
# one line.
regex = '(?P<Book>(([1234]|I{1,4})[\t\f\pZ]*)?\pL+\.?)[\t\f\pZ]+(?P<Locations>((?P<Chapter>1?[0-9]?[0-9])(-(?P<ChapterEnd>\d+)|,\s*(?P<ChapterNext>\\d+))*(:\s*(?P<Verse>\d+))?(-(?P<VerseEnd>\d+)|,\s*(?P<VerseNext>\d+))*\s?)+)'
haystack = '''
Gen 1:1, 2
3 King 1:3-4
II Ki. 3:12-14, 25
'''
case-insensitive = false
unicode = true
capture-count = 30
engines = [
  'regex/api',
  'regex/automata/backtrack',
  'regex/automata/pikevm',
  'regexold/api',
  're2/api',
  'pcre2/api/jit',
  'pcre2/api/nojit',
]
analysis = 'TODO'

[[benches]]
type = "count"
name = "codepoints"
regex = '.'
haystack-path = "allcodepoints.txt"
case-insensitive = false
unicode = true
match-count = 1112063
engines = [
  'regex/api',
  'regex/automata/hybrid',
  'regex/automata/pikevm',
  'regexold/api',
  're2/api',
  'pcre2/api/jit',
  # 'pcre2/api/nojit',
]
analysis = 'TODO'

[[benches]]
type = "count"
name = "graphemes"
regex = '''
(?x)
\p{gcb=CR} \p{gcb=LF}
|
\p{gcb=Control}
|
\p{gcb=Prepend}*
(
  (
    (\p{gcb=L}* (\p{gcb=V}+ | \p{gcb=LV} \p{gcb=V}* | \p{gcb=LVT}) \p{gcb=T}*)
    |
    \p{gcb=L}+
    |
    \p{gcb=T}+
  )
  |
  \p{gcb=RI} \p{gcb=RI}
  |
  \p{Extended_Pictographic} (\p{gcb=Extend}* \p{gcb=ZWJ} \p{Extended_Pictographic})*
  |
  [^\p{gcb=Control} \p{gcb=CR} \p{gcb=LF}]
)
[\p{gcb=Extend} \p{gcb=ZWJ} \p{gcb=SpacingMark}]*
|
\p{Any}
'''
haystack-path = "allcodepoints.txt"
case-insensitive = false
unicode = true
match-count = 1109199
engines = [
  'regex/api',
  'regex/automata/hybrid',
  'regex/automata/pikevm',
  'regexold/api',
]
analysis = 'TODO'

[[benches]]
type = "count-captures"
name = "rust-functions"
regex = 'fn is_(\w+)|fn as_(\w+)'
haystack-path = "rust-src-tools-3b0d4813.txt"
case-insensitive = false
unicode = false
capture-count = 948
engines = [
  'regex/api',
  'regex/automata/pikevm',
  'regexold/api',
  're2/api',
  'pcre2/api/jit',
  'pcre2/api/nojit',
]
analysis = '''
regex crate doesn't pull out the common 'fn' here. Even when written as
'fn (?:is_(\w+)|as_(\w+)', regex crate extracts 'fn is_' and 'fn as_', which
winds up being slower than looking for 'fn'. In effect, we should look for
a common prefix, and if we have that, feed it to memmem which is blindingly
fast.

Note also that 'fn\s*(?:is_(\w+)|as_(\w+))' doesn't even help here. Since
Unicode is disabled, the '\s' is small and literal extraction includes it.
Which in turn prevents the 'fn' from being fed to memmem. But the same idea
above would help here: look for a common prefix that is two bytes or more.
'''

[[benches]]
type = "count"
name = "two-or-three-long-words"
regex = '(?:\s|^)(\w{10})(\s\w{10})?(\s\w{10})(?:\s|$)'
haystack-path = "rust-src-tools-3b0d4813.txt"
case-insensitive = false
unicode = false
match-count = 49
engines = [
  'regex/api',
  'regex/automata/dense',
  'regex/automata/hybrid',
  'regexold/api',
  're2/api',
  'pcre2/api/jit',
  'pcre2/api/nojit',
]
analysis = 'TODO'

[[benches]]
type = "count-captures"
name = "two-or-three-long-words"
regex = '(?:\s|^)(\w{10})(\s\w{10})?(\s\w{10})(?:\s|$)'
haystack-path = "rust-src-tools-3b0d4813.txt"
case-insensitive = false
unicode = false
capture-count = 148
engines = [
  'regex/api',
  'regex/automata/pikevm',
  'regexold/api',
  're2/api',
  'pcre2/api/jit',
  'pcre2/api/nojit',
]
analysis = 'TODO'

[[benches]]
type = "count-captures"
name = "contiguous-letters"
regex = '(?:(a+)|(b+)|(c+)|(d+)|(e+)|(f+)|(g+)|(h+)|(i+)|(j+)|(k+)|(l+)|(m+)|(n+)|(o+)|(p+)|(q+)|(r+)|(s+)|(t+)|(u+)|(v+)|(w+)|(x+)|(y+)|(z+))'
haystack-path = "opensubtitles/en-medium.txt"
case-insensitive = false
unicode = false
capture-count = 81_494
engines = [
  'regex/api',
  'regex/automata/pikevm',
  'regexold/api',
  'pcre2/api/jit',
  'pcre2/api/nojit',
]
analysis = 'TODO'
